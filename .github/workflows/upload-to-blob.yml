name: Upload repo to Azure Blob Storage

on:
  push:
    branches:
      - main

jobs:
  upload-to-blob:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4


      - name: Upload changed files to Azure Blob Storage
        uses: azure/cli@v2
        env:
          AZURE_STORAGE_ACCOUNT: ${{ secrets.AZURE_STORAGE_ACCOUNT }}
          AZURE_STORAGE_KEY: ${{ secrets.AZURE_STORAGE_KEY }}
          AZURE_STORAGE_CONTAINER: ${{ secrets.AZURE_STORAGE_CONTAINER }}
        with:
          inlineScript: |
            # 변경된 파일 목록 가져오기 (추가/수정된 파일)
            CHANGED_FILES=$(git diff --name-only --diff-filter=AM HEAD^ HEAD)
            # 삭제된 파일 목록 가져오기
            DELETED_FILES=$(git diff --name-only --diff-filter=D HEAD^ HEAD)
            
            echo "변경된 파일들을 업로드 중..."
            for file in $CHANGED_FILES; do
              # .git 디렉토리만 제외 (.github은 포함)
              if [[ "$file" == .git/* || "$file" == .git\\* ]]; then
                continue
              fi
              if [ -f "$file" ]; then
                echo "업로드: $file"
                az storage blob upload \
                  --account-name "$AZURE_STORAGE_ACCOUNT" \
                  --account-key "$AZURE_STORAGE_KEY" \
                  --container-name "$AZURE_STORAGE_CONTAINER" \
                  --file "$file" \
                  --name "$file" \
                  --overwrite
              fi
            done
            
            echo "삭제된 파일들을 Storage에서 제거 중..."
            for file in $DELETED_FILES; do
              # .git 디렉토리만 제외
              if [[ "$file" == .git/* || "$file" == .git\\* ]]; then
                continue
              fi
              echo "삭제: $file"
              az storage blob delete \
                --account-name "$AZURE_STORAGE_ACCOUNT" \
                --account-key "$AZURE_STORAGE_KEY" \
                --container-name "$AZURE_STORAGE_CONTAINER" \
                --name "$file" \
                --delete-snapshots include || echo "파일 $file 삭제 실패 (존재하지 않을 수 있음)"
            done
            
            echo "Blob Storage 동기화 완료"

      - name: Setup Azure Cognitive Search Index
        uses: azure/cli@v2
        env:
          AZURE_SEARCH_SERVICE: ${{ secrets.AZURE_SEARCH_SERVICE }}
          AZURE_SEARCH_ADMIN_KEY: ${{ secrets.AZURE_SEARCH_ADMIN_KEY }}
          AZURE_STORAGE_ACCOUNT: ${{ secrets.AZURE_STORAGE_ACCOUNT }}
          AZURE_STORAGE_KEY: ${{ secrets.AZURE_STORAGE_KEY }}
          AZURE_STORAGE_CONTAINER: ${{ secrets.AZURE_STORAGE_CONTAINER }}
          AZURE_OPENAI_ENDPOINT: ${{ secrets.AZURE_OPENAI_ENDPOINT }}
          AZURE_OPENAI_KEY: ${{ secrets.AZURE_OPENAI_KEY }}
        with:
          inlineScript: |
            # Azure Cognitive Search 인덱스 및 데이터 소스 설정
            SEARCH_INDEX="code-search-index"
            DATA_SOURCE="code-blob-datasource"
            INDEXER="code-indexer"
            
            # 데이터 소스 생성/업데이트
            cat << EOF > datasource.json
            {
              "name": "$DATA_SOURCE",
              "type": "azureblob",
              "credentials": {
                "connectionString": "DefaultEndpointsProtocol=https;AccountName=$AZURE_STORAGE_ACCOUNT;AccountKey=$AZURE_STORAGE_KEY;EndpointSuffix=core.windows.net"
              },
              "container": {
                "name": "$AZURE_STORAGE_CONTAINER"
              }
            }
            EOF
            
            # 검색 인덱스 스키마 생성 (코드 요소별 세분화)
            cat << EOF > index.json
            {
              "name": "$SEARCH_INDEX",
              "fields": [
                {"name": "id", "type": "Edm.String", "key": true, "searchable": false},
                {"name": "fileName", "type": "Edm.String", "searchable": true, "filterable": true},
                {"name": "filePath", "type": "Edm.String", "searchable": true, "filterable": true},
                {"name": "content", "type": "Edm.String", "searchable": true},
                {"name": "fileExtension", "type": "Edm.String", "filterable": true},
                {"name": "codeType", "type": "Edm.String", "filterable": true, "facetable": true},
                {"name": "elementName", "type": "Edm.String", "searchable": true, "filterable": true},
                {"name": "startLine", "type": "Edm.Int32", "filterable": true, "sortable": true},
                {"name": "endLine", "type": "Edm.Int32", "filterable": true, "sortable": true},
                {"name": "lastModified", "type": "Edm.DateTimeOffset", "filterable": true, "sortable": true},
                {"name": "contentVector", "type": "Collection(Edm.Single)", "searchable": true, "dimensions": 1536, "vectorSearchProfile": "vector-profile"}
              ],
              "vectorSearch": {
                "profiles": [
                  {
                    "name": "vector-profile",
                    "algorithm": "hnsw-algorithm"
                  }
                ],
                "algorithms": [
                  {
                    "name": "hnsw-algorithm",
                    "kind": "hnsw"
                  }
                ]
              }
            }
            EOF
            
            # 인덱서 설정 (스케줄 없이 수동 실행만)
            cat << EOF > indexer.json
            {
              "name": "$INDEXER",
              "dataSourceName": "$DATA_SOURCE",
              "targetIndexName": "$SEARCH_INDEX",
              "fieldMappings": [
                {"sourceFieldName": "metadata_storage_name", "targetFieldName": "fileName"},
                {"sourceFieldName": "metadata_storage_path", "targetFieldName": "filePath"},
                {"sourceFieldName": "content", "targetFieldName": "content"},
                {"sourceFieldName": "metadata_storage_file_extension", "targetFieldName": "fileExtension"},
                {"sourceFieldName": "metadata_storage_last_modified", "targetFieldName": "lastModified"}
              ]
            }
            EOF
            
            # REST API를 통해 Azure Cognitive Search 설정
            SEARCH_URL="https://$AZURE_SEARCH_SERVICE.search.windows.net"
            
            # 데이터 소스 생성
            curl -X PUT "$SEARCH_URL/datasources/$DATA_SOURCE?api-version=2023-11-01" \
              -H "Content-Type: application/json" \
              -H "api-key: $AZURE_SEARCH_ADMIN_KEY" \
              -d @datasource.json
            
            # 인덱스 생성
            curl -X PUT "$SEARCH_URL/indexes/$SEARCH_INDEX?api-version=2023-11-01" \
              -H "Content-Type: application/json" \
              -H "api-key: $AZURE_SEARCH_ADMIN_KEY" \
              -d @index.json
            
            # 인덱서 생성
            curl -X PUT "$SEARCH_URL/indexers/$INDEXER?api-version=2023-11-01" \
              -H "Content-Type: application/json" \
              -H "api-key: $AZURE_SEARCH_ADMIN_KEY" \
              -d @indexer.json
            
            # 인덱서 실행
            curl -X POST "$SEARCH_URL/indexers/$INDEXER/run?api-version=2023-11-01" \
              -H "api-key: $AZURE_SEARCH_ADMIN_KEY"
            
            echo "Azure Cognitive Search 인덱싱이 시작되었습니다."

      - name: Wait for Indexer to Complete
        uses: azure/cli@v2
        env:
          AZURE_SEARCH_SERVICE: ${{ secrets.AZURE_SEARCH_SERVICE }}
          AZURE_SEARCH_ADMIN_KEY: ${{ secrets.AZURE_SEARCH_ADMIN_KEY }}
        with:
          inlineScript: |
            if [ -n "$AZURE_SEARCH_SERVICE" ]; then
              echo "인덱서 완료를 기다리는 중..."
              sleep 30
              echo "Azure Cognitive Search 인덱싱이 완료되었습니다."
            else
              echo "Azure Search 서비스가 설정되지 않았습니다."
            fi
